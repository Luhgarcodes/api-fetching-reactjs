{"version":3,"sources":["Button.js","Form.js","Cell.js","Row.js","Column.js","Table.js","App.js","index.js"],"names":["Button","_ref","buttonText","reqType","setReqType","react_default","a","createElement","className","type","onClick","Form","onSubmit","e","preventDefault","src_Button","Cell","cellData","Fragment","JSON","stringify","Object","entries","map","_ref2","_ref3","slicedToArray","key","value","Row","item","src_Cell","Column","Table","items","id","src_Column","src_Row","_regeneratorRuntime","exports","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","App","_useState","useState","_useState2","_useState3","_useState4","setItems","useEffect","asyncToGenerator","_callee","response","data","_context","fetch","concat","ok","json","t0","console","log","stack","apply","arguments","fetchItems","src_Form","src_Table","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f95489e1.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Button =({buttonText,reqType,setReqType})=>{\r\n    return(\r\n        <button\r\n            className={buttonText === reqType ?'selected':null}\r\n            type='button'\r\n            onClick={()=>{setReqType(buttonText)}}\r\n        >{buttonText}</button>\r\n    );\r\n}\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button\";\r\nconst Form =({reqType,setReqType})=>{\r\n    return(\r\n        <form onSubmit={e => e.preventDefault()}>\r\n            <Button \r\n                buttonText = 'users'\r\n                reqType = {reqType} \r\n                setReqType = {setReqType}\r\n            />\r\n            <Button \r\n                buttonText = 'posts'\r\n                reqType = {reqType} \r\n                setReqType = {setReqType}\r\n            />\r\n            <Button \r\n                buttonText = 'comments'\r\n                reqType = {reqType} \r\n                setReqType = {setReqType}\r\n            />\r\n            \r\n            \r\n        </form>\r\n    );\r\n}\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Cell =({cellData})=>{    \r\n    \r\n    return(\r\n        // <td>{JSON.stringify(cellData)}</td>  \r\n        \r\n        <>\r\n        {\r\n            \r\n            (typeof cellData !== \"object\")\r\n            ? <td>{JSON.stringify(cellData)}</td>\r\n            \r\n            : Object.entries(cellData).map(([key, value]) => {\r\n                return (\r\n                    <Cell key ={key} cellData={(value)} />\r\n                );\r\n            })\r\n        \r\n                }\r\n        </>\r\n        \r\n        \r\n        \r\n        );\r\n}\r\nexport default Cell;\r\n\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst Row = ({item})=>{\r\n\r\n\r\n    return(\r\n        <tr>\r\n            {Object.entries(item).map(([key, value]) => {\r\n                // console.log(key);\r\n                return (\r\n                    <Cell key ={key} cellData={(value)} />\r\n                );\r\n            })}\r\n        </tr>\r\n        );\r\n}\r\nexport default Row;","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst Column = ({item})=>{\r\n    return( \r\n        <tr>\r\n            {Object.entries(item).map(([key]) => {\r\n\r\n                return (      \r\n                <Cell key ={key} cellData={JSON.stringify(key)} />\r\n                // <td>{key}</td>\r\n                \r\n                );\r\n            })}\r\n        </tr>\r\n        );\r\n}\r\nexport default Column;","import React from \"react\";\r\nimport Row from \"./Row\";\r\nimport Column from \"./Column\";\r\n\r\nconst Table=({items})=>{\r\n    return(\r\n    <div className=\"table-container\">\r\n        <table>\r\n            <tbody>\r\n\r\n                {items.map(item =>((item.id === 1)&&\r\n                    <Column key={item.id} item = {item} />))}\r\n                    \r\n                {items.map(item => (\r\n                    <Row key={item.id} item={item} />))}\r\n\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    );\r\n}\r\nexport default Table;","import React from 'react';\nimport {useEffect,useState}  from 'react';\nimport Form from './Form';\n// import List from './List';\nimport Table from './Table';\n\nfunction App (){\n\n  const API_URL = 'https://jsonplaceholder.typicode.com/'\n  // const API_URL = 'http://localhost:8000/';\n  const [reqType, setReqType] = useState(\"users\");\n  const[items,setItems] = useState([]);\n  // const[fetchError,setFetchError] = useState(null);\n\n  useEffect(() =>{\n    const fetchItems = async() =>{\n      try{\n        const response = await fetch (`${API_URL}${reqType}`);\n        if(!response.ok) throw Error (\"error-launched\");\n        const data = await response.json();        \n        setItems(data);\n      }catch(err){\n        console.log(err.stack); \n      }      \n    }\n    fetchItems();\n  },[reqType])     \n\n  return(\n\n      <div className=\"App\">\n        <Form reqType = {reqType} setReqType = {setReqType} />\n        {/* <List items={items} /> */}\n        <Table items={items} />\n      </div>\n      )}\nexport default App;\n\n//mar 2006\n//mar 2007\n//aug 2008\n//sep 2008 ","import React from 'react';\nimport  ReactDOM from \"react-dom/client\";\nimport './index.css';\nimport App from './App.js';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}